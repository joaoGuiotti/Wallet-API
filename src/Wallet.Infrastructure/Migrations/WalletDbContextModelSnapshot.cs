// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wallet.Infrastructure.Persistence.Context;

#nullable disable

namespace Wallet.Infrastructure.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    partial class WalletDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Wallet.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("Balance")
                        .HasColumnType("float");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Limit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Balance = 1000f,
                            ClientId = new Guid("555fd1cb-f046-4406-bfb9-df8ba563bb1d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 8, 18, 53, 44, 892, DateTimeKind.Unspecified).AddTicks(6142), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Balance = 500f,
                            ClientId = new Guid("1de5e49d-cd70-401e-a43a-fc1d24aac653"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 8, 18, 53, 44, 892, DateTimeKind.Unspecified).AddTicks(6144), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("555fd1cb-f046-4406-bfb9-df8ba563bb1d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 8, 18, 53, 44, 892, DateTimeKind.Unspecified).AddTicks(6050), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "cliente1@email.com",
                            Name = "Cliente 1"
                        },
                        new
                        {
                            Id = new Guid("1de5e49d-cd70-401e-a43a-fc1d24aac653"),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 8, 18, 53, 44, 892, DateTimeKind.Unspecified).AddTicks(6052), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "cliente2@email.com",
                            Name = "Cliente 2"
                        });
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountFromId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountToId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountFromId");

                    b.HasIndex("AccountToId");

                    b.ToTable("Transactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac94da39-8f6b-49ba-a3c7-61cc14b906ed"),
                            AccountFromId = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccountToId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Amount = 100f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 7, 8, 18, 53, 44, 892, DateTimeKind.Unspecified).AddTicks(6271), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Account", b =>
                {
                    b.HasOne("Wallet.Domain.Entities.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Wallet.Domain.Entities.Account", "AccountFrom")
                        .WithMany()
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wallet.Domain.Entities.Account", "AccountTo")
                        .WithMany()
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountFrom");

                    b.Navigation("AccountTo");
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Client", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
